---
import ProductSlideshow from '@components/Products/ProductSlideshow.astro'
import MainLayout from '@layouts/MainLayout.astro'
import { actions } from 'astro:actions'

const { slug } = Astro.params

const { data, error } = await actions.getProductBySlug(slug ?? '')

if (error) {
  return Astro.redirect('/404')
}

const { product } = data!
const { images } = product
---

<MainLayout
  title={product.title}
  description={product.description}
  image={images.at(0)}
>
  <div class='grid grid-cols-1 md:grid-cols-2 w-full mt-10 gap-8'>
    <ProductSlideshow images={images} />

    <section>
      <h2 class='text-2xl font-bold'>{product.title}</h2>
      <h2 class='font-bold'>${product.price}</h2>

      <h3 class='mt-5'>Tallas</h3>
      <ul class='flex gap-3'>
        {
          product.sizes
            .split(',')
            .map((size) => <li data-size={size}>{size}</li>)
        }
      </ul>

      <h3 class='mt-5'>Cantidad</h3>
      <div>
        <button class='btn-quantity rounded'>-</button>
        <input type='number' min='1' value='1' class='rounded bg-gray-50' />
        <button class='btn-quantity rounded'>+</button>
      </div>

      <button
        class='mt-5 bg-blue-500 text-white p-3 w-full rounded disabled:bg-gray-600'
        >Añadir al carrito</button
      >

      <h3 class='mt-10'>Descripción</h3>
      <p class='text-pretty'>{product.description}</p>
    </section>
  </div>

  <input type='hidden' id='product-id' value={product.id} />
</MainLayout>

<style>
  h3 {
    @apply font-bold;
  }

  li {
    @apply hover:underline cursor-pointer;
  }

  .selected-size {
    @apply text-blue-500 underline font-bold transition-all;
  }

  .btn-quantity {
    @apply w-10 text-center p-2 border border-gray-300 hover:bg-gray-100 cursor-pointer;
  }

  input {
    @apply w-16 text-center p-2 border border-gray-300;
  }

  input[type='number']::-webkit-outer-spin-button,
  input[type='number']::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  input[type='number'] {
    -moz-appearance: textfield; /* Para Firefox */
  }
</style>

<script>
  import { itemsInCart } from '@store/cart.store'
  import { CartCookiesClient } from '@utils/cart-cookies'
  import { navigate } from 'astro:transitions/client'

  document.addEventListener('astro:page-load', () => {
    const sizeElements = document.querySelectorAll('li')

    sizeElements.forEach((element) => {
      element.addEventListener('click', (e) => {
        sizeElements.forEach((s) => s.classList.remove('selected-size'))
        element.classList.add('selected-size')
      })
    })

    const quantityInput = document.querySelector('input') as HTMLInputElement
    const productIdInput = document.querySelector(
      '#product-id'
    ) as HTMLInputElement

    let quantity = 1
    const [btnDecrement, btnIncrement, btnAddToCart] =
      document.querySelectorAll('button')

    if (!btnDecrement || !btnIncrement) return

    btnIncrement.addEventListener('click', () => {
      quantity = Math.min(quantity + 1, 5)
      quantityInput.value = quantity.toString()
    })

    btnDecrement.addEventListener('click', () => {
      quantity = Math.max(quantity - 1, 1)
      quantityInput.value = quantity.toString()
    })

    btnAddToCart.addEventListener('click', async () => {
      const id = productIdInput.value
      const size = document
        .querySelector('.selected-size')
        ?.getAttribute('data-size')

      if (!id) return alert('Seleciones un producto')
      if (!size) return alert('Seleciones una Talla')

      // btnAddToCart.disabled = true
      const cart = CartCookiesClient.addItem({ id, size, quantity })
      itemsInCart.set(cart.length)

      // window.location.href = '/cart'
      await navigate('/cart')
    })
  })
</script>
