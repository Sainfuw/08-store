---
import MainLayout from '@/layouts/MainLayout.astro'
import ProductImage from '@components/Products/ProductImage.astro'
import ProductSlideshow from '@components/Products/ProductSlideshow.astro'

import { actions } from 'astro:actions'

const { slug } = Astro.params
const { data, error } = await actions.getProductBySlug(slug ?? '')

if (error) {
  return Astro.redirect('/404')
}

const { product } = data
---

<MainLayout title='Mantenimiento de producto'>
  <h1>{product.title}</h1>
  <a href='javascript:history.back()' class='text-blue-500'>← Volver</a>

  <form class='grid grid-cols-1 sm:grid-cols-2 gap-4'>
    <input type='hidden' name='id' value={product.id} />

    <!-- Datos generales -->
    <div class='mt-2'>
      <h2 class='text-lg font-semibold'>Datos generales</h2>

      <!-- Titulo -->
      <div class='mb-4'>
        <label class='block'
          >Título
          <input
            type='text'
            id='title'
            name='title'
            value={product.title}
            class='w-full p-2 border border-gray-300 rounded'
          />
        </label>
      </div>

      <!-- Slug -->
      <div class='mb-4'>
        <label class='block'>
          Slug
          <input
            type='text'
            id='slug'
            name='slug'
            value={product.slug}
            class='w-full p-2 border border-gray-300 rounded'
          />
        </label>
      </div>

      <!-- Descripción -->
      <div class='mb-4'>
        <label class='block'>
          Descripción
          <textarea
            id='description'
            name='description'
            class='w-full p-2 border border-gray-300 rounded'
            rows='8'>{product.description}</textarea
          >
        </label>
      </div>

      <div class='grid grid-cols-1 sm:grid-cols-2 gap-5'>
        <!-- Precio -->
        <div class='mb-4'>
          <label class='block'>
            Precio
            <input
              type='number'
              id='price'
              name='price'
              value={product.price}
              class='w-full p-2 border border-gray-300 rounded'
            />
          </label>
        </div>

        <!-- Inventario -->
        <div class='mb-4'>
          <label class='block'>
            Inventario
            <input
              type='number'
              id='stock'
              name='stock'
              value={product.stock}
              class='w-full p-2 border border-gray-300 rounded'
            />
          </label>
        </div>
      </div>

      <!-- Labels -->
      <div class='mb-4'>
        <label class='block'>
          Etiquetas <small class='text-gray-500'>(Separado por comas)</small>
          <input
            type='text'
            id='tags'
            name='tags'
            value={product.tags}
            class='w-full p-2 border border-gray-300 rounded'
          />
        </label>
      </div>

      <div class='grid grid-cols-2 gap-4'>
        <!-- Gender -->
        <div class='mb-4'>
          <label class='block'>
            Sexo
            <select
              class='w-full p-2 border border-gray-300 rounded'
              name='gender'
            >
              <option value=''>[ Seleccione ]</option>
              {
                ['men', 'women', 'unisex', 'kid'].map((gender) => (
                  <option
                    value={gender}
                    class='capitalize'
                    selected={gender === product.gender}
                  >
                    {gender.toUpperCase()}
                  </option>
                ))
              }
            </select>
          </label>
        </div>

        <!-- Type -->
        <div class='mb-4'>
          <label class='block'>
            Tipo
            <select
              class='w-full p-2 border border-gray-300 rounded'
              name='type'
            >
              <option value=''>[ Seleccione ]</option>
              {
                ['shirts', 'shirt', 'pants', 'hats', 'hoodies'].map((type) => (
                  <option
                    value={type}
                    class='capitalize'
                    selected={type === product.type}
                  >
                    {type.toUpperCase()}
                  </option>
                ))
              }
            </select>
          </label>
        </div>
      </div>

      <!-- Tallas -->
      <div class='mb-4'>
        <label class='block'>
          Tallas
          <div class='flex'>
            {
              ['XS', 'S', 'M', 'L', 'XL', 'XXL'].map((size) => {
                const sizes = product.sizes.split(',').map((s) => s.trim())
                return (
                  <button
                    type='button'
                    onclick='this.classList.toggle("active")'
                    class:list={[
                      'btn-size',
                      {
                        active: sizes.includes(size),
                      },
                    ]}
                  >
                    {size}
                  </button>
                )
              })
            }
          </div>
        </label>
      </div>
    </div>

    <!-- Imagenes -->
    <div>
      <!-- File upload -->
      <div class='mt-4'>
        <!-- Guardar  -->
        <div class='flex justify-end'>
          <button class='bg-blue-500 mb-5 p-2 rounded text-white'
            >Guardar producto</button
          >
        </div>

        <!-- File input -->
        <div class='flex items-center justify-center w-full'>
          <label
            for='file-upload'
            class='flex flex-col items-center justify-center w-full h-52 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:bg-gray-100'
            id='drop-zone'
          >
            <div class='flex flex-col items-center justify-center pt-5 pb-6'>
              <svg
                class='w-8 h-8 mb-4 text-gray-500'
                fill='none'
                stroke='currentColor'
                viewBox='0 0 24 24'
                xmlns='http://www.w3.org/2000/svg'
              >
                <path
                  stroke-linecap='round'
                  stroke-linejoin='round'
                  stroke-width='2'
                  d='M7 16V4a2 2 0 012-2h6a2 2 0 012 2v12m-6 4l-4-4m0 0l4-4m-4 4h12'
                ></path>
              </svg>
              <p class='mb-2 text-sm text-gray-500' id='lbl-selected-files'>
                <span class='font-semibold'>Click aquí </span> o arrastra los archivos
              </p>
              <p class='text-xs text-gray-500'>
                SVG, PNG, JPG or GIF (max. 800x400px)
              </p>
            </div>

            <!-- class="hidden" -->
            <!-- accept only images -->
            <input
              id='file-upload'
              name='imageFiles'
              type='file'
              accept='image/*'
              multiple
            />
          </label>
        </div>

        <!-- Slideshow -->
        <ProductSlideshow images={product.images.map((i) => i.image)} />

        <table class='w-full border mb-8'>
          <thead>
            <tr>
              <th>Imagen</th>
              <th>Eliminar</th>
            </tr>
          </thead>
          <tbody>
            {
              product.images.map(({ id, image }) => (
                <tr class='border'>
                  <td class='flex justify-center'>
                    <ProductImage
                      src={image}
                      alt={product.title}
                      className='w-16 h-16 rounded'
                    />
                  </td>
                  <td class='text-center'>
                    <button
                      class='btn-delete-image text-center text-red-500'
                      data-id={id}
                      data-slug={product.slug}
                    >
                      <svg
                        class='icon icon-tabler icon-tabler-trash ml-1'
                        width='32'
                        height='32'
                        viewBox='0 0 24 24'
                        stroke-width='1.5'
                        stroke='currentColor'
                        fill='none'
                        stroke-linecap='round'
                        stroke-linejoin='round'
                      >
                        <path stroke='none' d='M0 0h24v24H0z' fill='none' />
                        <path d='M4 7l16 0' />
                        <path d='M10 11l0 6' />
                        <path d='M14 11l0 6' />
                        <path d='M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12' />
                        <path d='M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3' />
                      </svg>
                    </button>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
  </form>

  <style>
    .btn-size,
    .btn-delete-image {
      @apply rounded border cursor-pointer border-gray-300 w-10 h-10 mr-4 hover:bg-blue-300 hover:text-white transition-all;
    }

    .active {
      @apply bg-blue-500 text-white;
    }
  </style>
</MainLayout>

<script>
  import { actions } from 'astro:actions'
  import { navigate } from 'astro:transitions/client'

  document.addEventListener('astro:page-load', () => {
    const form = document.querySelector('form') as HTMLFormElement

    const sizeButtons = document.querySelectorAll('.btn-size')

    if (!form) return

    form.addEventListener('submit', async (e) => {
      e.preventDefault()

      const selectedSizes = Array.from(sizeButtons)
        .filter((btn) => btn.classList.contains('active'))
        .map((btn) => btn.textContent?.trim())
        .join(',')

      const formData = new FormData(form)
      formData.set('sizes', selectedSizes)
      // const formValues = Object.fromEntries(formData.entries())

      const { data, error } = await actions.createUpdateProduct(formData)

      if (error) return alert(error.message)

      navigate(`/admin/products/${data?.slug}`)
    })
  })

  const btnDeleteImage = document.querySelectorAll('.btn-delete-image')

  btnDeleteImage.forEach((btn) => {
    btn.addEventListener('click', async (e: MouseEvent | Event) => {
      if (!e.currentTarget || !(e.currentTarget instanceof HTMLElement)) return
      e.preventDefault()

      const slug = e.currentTarget.dataset.slug ?? ''
      const id = e.currentTarget.dataset.id ?? ''
      const { data, error } = await actions.deleteProductImage(id)

      if (error) return alert(error.message)

      navigate(`/admin/products/${slug}`)
    })
  })
</script>
